%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include "..\qtree\AqlNode.h"
#include "aql-driver.h"
#include "aql-parser.tab.hh"

#undef yywrap
#define yywrap() 1
#define yyterminate() return token::END;
%}

%option noyywrap nounput batch debug

%{
#define YY_USER_ACTION yylloc->columns(yyleng);
%}

%%

%{
	typedef AQL::aql_parser::token token;
%}

"Begin Query"		return token::Q_BEGIN;
"End Query"			return token::Q_END;

"From"				return token::FROM_BEGIN;
"Where"				return token::WHERE_BEGIN;
"Select"			return token::SELECT_BEGIN;

[a-zA-Z][_a-zA-Z0-9]*		{
					//char * cpyIdName;
					//cpyIdName = (char *) malloc(sizeof(yytext));
					//strcpy(cpyIdName, yytext);
					//yylval.idName = cpyIdName;
					// yylval = static_cast<YYSTYPE>(AQL::AqlNode::CreateDefaultNode());
					return token::IDENTIFIER;
				}

[0-9]+				{
					//char * cpyLitValue;
					//cpyLitValue = (char *) malloc(sizeof(yytext));
					//strcpy(cpyLitValue, yytext);
					//yylval.litValue = cpyLitValue;
					// yylval = AQL::AqlNode::CreateDefaultNode();
					return token::INTEGER;
				}

[0-9]*\.[0-9]+		{
					//char * cpyLitValue;
					//cpyLitValue = (char *) malloc(yyleng);
					//strcpy(cpyLitValue, yytext);
					//yylval.litValue = cpyLitValue;
					// yylval = AQL::AqlNode::CreateDefaultNode();
					return token::FLOAT;
				}

[\"][0-9A-Za-z]*[\"]		{
					//char * cpyLitValue;
					//int length = strlen(yytext);
					//cpyLitValue = (char *) malloc(sizeof(yytext) - 2);
					//strncpy(cpyLitValue, yytext+1, length);
					//yylval.litValue = cpyLitValue;
					// yylval = AQL::AqlNode::CreateDefaultNode();
					return token::STRING;
				}

"->"			return token::MEMBER_PTR;
"=="			return token::EQ;
"!="			return token::NE;
"<>"			return token::NE;
">"				return token::GT;
"<"				return token::LT;
">="			return token::GE;
"<="			return token::LT;
".Not."			return token::NOT;
".And."			return token::AND;
".Or."			return token::OR;

[\n\t ]+		/* nao devolve espacos em branco */

. 				driver.error(*yylloc, "Caracter Invalido");

%% 

void AQL::aql_driver::scan_begin() {
	yy_flex_debug = trace_scanning;
	if (file == "-") 
	{
		yyin = stdin;
	} 
	else if (!(yyin = fopen(file.c_str(), "r")))
	{
		error(std::string("Impossivel abrir o arquivo ") + file);
		exit(1);
	}
}

void AQL::aql_driver::scan_end() {
	fclose(yyin);
}
