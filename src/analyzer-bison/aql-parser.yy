%skeleton "lalr1.cc"%require "2.4.1"%defines%define namespace "AQL"%define parser_class_name "aql_parser"%code requires{#include <string>#include "..\qtree\AqlNode.h"#include "..\qtree\StringNode.h"#define YYSTYPE AQL::AqlNode*namespace AQL {	class aql_driver; }}%parse-param { aql_driver& driver }%lex-param { aql_driver& driver }%locations%initial-action{	@$.begin.filename = @$.end.filename = &driver.file;};%debug%error-verbose%code {#include "aql-driver.h"}%token	END	0		"end"%token 	IDENTIFIER	"identifier"%token 	INTEGER 	"integer"%token	FLOAT 		"float"%token	STRING		"string"%token 	MEMBER_PTR	"->"%token 	EQ 			"=="%token	NE 			"!="%token	GT 			">"%token	LT 			"<"%token	GE 			">="%token	LE			"<="%token 	NOT 		"!"%token	AND 		"&&"%token	OR			"||"%token 	FROM_BEGIN 	"From"%token	WHERE_BEGIN "Where"%token	SELECT_BEGIN	"Select"%token 	Q_BEGIN 	"Begin Query"%token	Q_END		"End Query"%%%start query;query: 				  "Begin Query" from_clause where_clause select_clause "End Query" 	{ }					| "Begin Query" from_clause select_clause "End Query"				{ }					;					from_clause:		  "From" table_list					;					table_list:			  table_identifier					| table_list ',' table_identifier					;table_identifier: 	  "identifier"					;					where_clause:		  "Where" predicate_list					;					predicate_list:		  predicate					| predicate_list "&&" predicate					| predicate_list "||" predicate					;					predicate:			  expression					| expression "==" expression		{ $$ = new AQL::StringNode; $$->addChildNodes(2, $1, $3);}					| expression "!=" expression					| expression ">" expression					| expression "<" expression					| expression ">=" expression					| expression "<=" expression					| "!" predicate					;select_clause:		  "Select"					| "Select" member_list					;member_list:		  expression					| member_list ',' expression					;				expression:			  IDENTIFIER							{   }					| IDENTIFIER MEMBER_PTR IDENTIFIER		{ 	  }					| IDENTIFIER '(' expression ')'			{   }					| INTEGER								{   }					| FLOAT									{   }					| STRING								{ $$ = new AQL::StringNode; }					;					%%void AQL::aql_parser::error(const AQL::aql_parser::location_type& l, const std::string& m) {	driver.error(l, m);}